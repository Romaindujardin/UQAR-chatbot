#!/bin/bash

# Script de d√©marrage pour l'Assistant √âducatif UQAR avec Apptainer
# Remplace Docker/Docker Compose par Apptainer

set -e

echo "üöÄ D√©marrage de l'Assistant √âducatif UQAR (Apptainer)"
echo "===================================================="

# V√©rifier que Apptainer est install√©
if ! command -v apptainer &> /dev/null; then
    echo "‚ùå Apptainer n'est pas install√©. Veuillez l'installer avant de continuer."
    echo "üí° Installation: https://apptainer.org/docs/admin/main/installation.html"
    exit 1
fi

# Configurer les variables d'environnement Apptainer pour √©viter les erreurs d'espace disque
export APPTAINER_CACHEDIR="${HOME}/.apptainer/cache"
export APPTAINER_TMPDIR="${HOME}/.apptainer/tmp"
mkdir -p "${APPTAINER_CACHEDIR}" "${APPTAINER_TMPDIR}"

# Cr√©er les dossiers n√©cessaires pour les donn√©es persistantes
echo "üìÅ Cr√©ation des dossiers n√©cessaires..."
mkdir -p "${HOME}/apptainer_data/postgres_data"
mkdir -p "${HOME}/apptainer_data/chromadb_data"
mkdir -p "${HOME}/apptainer_data/ollama_data"
mkdir -p "${HOME}/apptainer_data/uploads"
mkdir -p "${HOME}/apptainer_data/logs"

# Cr√©er les dossiers dans le projet
mkdir -p backend/logs
mkdir -p backend/uploads
mkdir -p backend/chroma_data

# Copier le fichier d'environnement s'il n'existe pas
if [ ! -f backend/.env ]; then
    echo "üìù Cr√©ation du fichier .env..."
    cp backend/env.example backend/.env
    
    # Mise √† jour des URLs de connexion pour Apptainer
    sed -i 's/DATABASE_URL=.*/DATABASE_URL=postgresql:\/\/uqar_user:uqar_password@localhost:5432\/uqar_db/' backend/.env
    sed -i 's/CHROMA_HOST=.*/CHROMA_HOST=localhost/' backend/.env
    sed -i 's/OLLAMA_HOST=.*/OLLAMA_HOST=localhost/' backend/.env
    
    echo "‚ö†Ô∏è  N'oubliez pas de v√©rifier les variables d'environnement dans backend/.env"
fi

# V√©rifier les ports disponibles
echo "üîç V√©rification des ports..."
for PORT in 3000 8000 5432 8001 11434; do
    if lsof -Pi :$PORT -sTCP:LISTEN -t >/dev/null 2>&1; then
        echo "‚ö†Ô∏è  Le port $PORT est d√©j√† utilis√©"
    fi
done

# Construire les images Apptainer
echo "üî® Construction des images Apptainer..."

echo "üîÑ Construction de l'image PostgreSQL..."
apptainer build --ignore-fakeroot-command postgres.sif postgres.def

echo "üîÑ Construction de l'image ChromaDB..."
apptainer build --ignore-fakeroot-command chromadb.sif chromadb.def

echo "üîÑ Construction de l'image Backend..."
cd backend
apptainer build --ignore-fakeroot-command ../backend.sif backend.def
cd ..

echo "üîÑ Construction de l'image Frontend..."
cd frontend
apptainer build --ignore-fakeroot-command ../frontend.sif frontend.def
cd ..

# D√©marrer les services
echo "üöÄ D√©marrage des services..."

# D√©marrer PostgreSQL
echo "üîÑ D√©marrage de PostgreSQL..."
apptainer instance start \
    --bind "${HOME}/apptainer_data/postgres_data:/var/lib/postgresql/data" \
    postgres.sif postgres_instance

# D√©marrer ChromaDB
echo "üîÑ D√©marrage de ChromaDB..."
apptainer instance start \
    --bind "${HOME}/apptainer_data/chromadb_data:/chroma/chroma" \
    chromadb.sif chromadb_instance

# D√©marrer Ollama avec m√©thode directe (plus fiable)
echo "üîÑ D√©marrage d'Ollama avec support GPU..."

# Arr√™ter Ollama existant si pr√©sent
pkill -f ollama 2>/dev/null || true
sleep 2

# Lib√©rer le port 11434 si utilis√©
if ss -tuln | grep -q ":11434 "; then
    echo "‚ö†Ô∏è Port 11434 occup√©, tentative de lib√©ration..."
    fuser -k 11434/tcp 2>/dev/null || true
    sleep 2
fi

# D√©marrer Ollama directement en arri√®re-plan
OLLAMA_HOST=0.0.0.0 OLLAMA_PORT=11434 nohup apptainer run --nv \
    --bind "${HOME}/apptainer_data/ollama_data:/root/.ollama" \
    docker://ollama/ollama:latest > "${HOME}/apptainer_data/logs/ollama.log" 2>&1 &

# Sauvegarder le PID pour arr√™t ult√©rieur
echo $! > "${HOME}/apptainer_data/ollama_data/ollama.pid"
echo "‚è≥ Ollama d√©marr√© avec PID: $!"

# Attendre que les services de base soient pr√™ts
echo "‚è≥ Attente du d√©marrage des services de base..."
sleep 10

# V√©rifier si Ollama est pr√™t
echo "üîç V√©rification d'Ollama..."
if curl -s --connect-timeout 5 http://localhost:11434/api/version >/dev/null; then
    echo "‚úÖ Ollama pr√™t"
    # V√©rifier mod√®le
    if curl -s http://localhost:11434/api/tags | grep -q "llama3.1:70b"; then
        echo "‚úÖ Mod√®le llama3.1:70b disponible"
    else 
        echo "‚ö†Ô∏è Mod√®le llama3.1:70b non trouv√©"
    fi
else
    echo "‚ö†Ô∏è Ollama n'est pas pr√™t, v√©rifiez les logs: ${HOME}/apptainer_data/logs/ollama.log"
fi

# D√©marrer le Backend
echo "üîÑ D√©marrage du Backend..."
apptainer instance start \
    --bind "./backend:/app" \
    --bind "${HOME}/apptainer_data/uploads:/app/uploads" \
    --bind "${HOME}/apptainer_data/logs:/app/logs" \
    --env "DATABASE_URL=postgresql://uqar_user:uqar_password@localhost:5432/uqar_db" \
    --env "CHROMA_HOST=localhost" \
    --env "CHROMA_PORT=8001" \
    --env "OLLAMA_HOST=localhost" \
    --env "OLLAMA_PORT=11434" \
    --env "OLLAMA_MODEL=llama3.1:70b" \
    --env "JWT_SECRET_KEY=af477b8d25c0527311f097b7098bf98c60b34a6030294231574358ee4ecf4822" \
    --env "DEBUG=true" \
    backend.sif backend_instance

# D√©marrer le Frontend
echo "üîÑ D√©marrage du Frontend..."
apptainer instance start \
    --bind "./frontend:/app" \
    --env "NEXT_PUBLIC_API_URL=http://localhost:8080" \
    frontend.sif frontend_instance

echo ""
echo "‚úÖ Services d√©marr√©s avec succ√®s !"
echo ""
echo "üåê Acc√®s aux services :"
echo "   Frontend:    http://localhost:3000"
echo "   Backend API: http://localhost:8000"
echo "   Docs API:    http://localhost:8000/docs"
echo "   PostgreSQL:  localhost:5432"
echo "   ChromaDB:    http://localhost:8001"
echo "   Ollama:      http://localhost:11434"
echo ""
echo "üìã Commandes utiles :"
echo "   Voir les instances:      apptainer instance list"
echo "   V√©rifier le GPU:         nvidia-smi"
echo "   Voir les logs (backend): apptainer instance logs backend_instance"
echo "   Voir logs Ollama:        cat ${HOME}/apptainer_data/logs/ollama.log"
echo "   Arr√™ter un service:      apptainer instance stop <nom_instance>"
echo "   Arr√™ter tout:            ./stop-all.sh"
echo "   Shell dans un service:   apptainer shell instance://<nom_instance>"
echo ""
echo "‚è≥ Les services peuvent prendre quelques minutes √† √™tre compl√®tement op√©rationnels."
echo ""
echo "üéì Bon apprentissage avec l'Assistant √âducatif UQAR!" 