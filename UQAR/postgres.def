Bootstrap: docker
From: postgres:15

%environment
    export POSTGRES_DB=uqar_db
    export POSTGRES_USER=uqar_user
    export POSTGRES_PASSWORD=uqar_password
    export PGDATA=/var/lib/postgresql/data
    export POSTGRES_HOST_AUTH_METHOD=trust

%post
    # Install fakeroot package
    apt-get update && apt-get install -y fakeroot && rm -rf /var/lib/apt/lists/*
    
    # Create necessary directories
    mkdir -p /docker-entrypoint-initdb.d
    mkdir -p /var/lib/postgresql/data
    
    # Set permissions - use direct command instead of relying on fakeroot
    chmod 700 /var/lib/postgresql/data

%files
    backend/init.sql /docker-entrypoint-initdb.d/init.sql

%runscript
    # Modify this to avoid using fakeroot for user changes
    if [ ! -s "$PGDATA/PG_VERSION" ]; then
        mkdir -p "$PGDATA"
        chmod 700 "$PGDATA"
        # Use postgres command directly
        gosu postgres initdb -D "$PGDATA"
        
        # Start PostgreSQL server
        gosu postgres pg_ctl -D "$PGDATA" -o "-c listen_addresses='*'" start
        
        # Create the database and user
        gosu postgres createdb $POSTGRES_DB
        gosu postgres psql -c "CREATE USER $POSTGRES_USER WITH PASSWORD '$POSTGRES_PASSWORD' SUPERUSER;"
        
        # Execute init script
        if [ -f /docker-entrypoint-initdb.d/init.sql ]; then
            gosu postgres psql -d $POSTGRES_DB -f /docker-entrypoint-initdb.d/init.sql
        fi
        
        # Stop the server
        gosu postgres pg_ctl -D "$PGDATA" stop
    fi
    
    # Start the server in foreground mode - use docker-entrypoint.sh which handles permissions
    exec docker-entrypoint.sh postgres

%startscript
    # Use docker's entrypoint which handles permissions correctly
    exec docker-entrypoint.sh postgres 