#!/usr/bin/env python3
"""
Test script pour v√©rifier le rendu Markdown dans les r√©ponses du chat
"""

import requests
import json
import sys
import os

# Configuration
BASE_URL = "http://localhost:8000"
STUDENT_USERNAME = "student"
STUDENT_PASSWORD = "student123"

def login_student():
    """Se connecter en tant qu'√©tudiant"""
    login_data = {
        "username": STUDENT_USERNAME,
        "password": STUDENT_PASSWORD
    }
    
    response = requests.post(f"{BASE_URL}/api/auth/login", data=login_data)
    
    if response.status_code != 200:
        print(f"Erreur de connexion √©tudiant: {response.status_code}")
        print(response.text)
        return None
    
    return response.json()["access_token"]

def get_or_create_session(token):
    """R√©cup√©rer ou cr√©er une session de chat"""
    headers = {"Authorization": f"Bearer {token}"}
    
    # R√©cup√©rer les sessions existantes
    response = requests.get(f"{BASE_URL}/api/chat/sessions", headers=headers)
    if response.status_code == 200:
        sessions = response.json()
        if sessions:
            return sessions[0]
    
    # R√©cup√©rer les sections
    response = requests.get(f"{BASE_URL}/api/sections/", headers=headers)
    if response.status_code != 200:
        print("Erreur lors de la r√©cup√©ration des sections")
        return None
    
    sections = response.json()
    if not sections:
        print("Aucune section trouv√©e")
        return None
    
    # Cr√©er une nouvelle session
    response = requests.post(f"{BASE_URL}/api/chat/sessions", 
                            json={"section_id": sections[0]["id"]}, 
                            headers=headers)
    
    if response.status_code != 200:
        print(f"Erreur lors de la cr√©ation de session: {response.status_code}")
        return None
    
    return response.json()

def test_markdown_message(token, session_id, message):
    """Tester un message et v√©rifier la r√©ponse Markdown"""
    headers = {"Authorization": f"Bearer {token}"}
    
    print(f"\nüìù Test: {message}")
    print("=" * 60)
    
    try:
        response = requests.post(
            f"{BASE_URL}/api/chat/sessions/{session_id}/messages/stream",
            json={"content": message},
            headers=headers,
            stream=True
        )
        
        if response.status_code != 200:
            print(f"‚ùå Erreur: {response.status_code}")
            return False
        
        full_response = ""
        for line in response.iter_lines():
            if line:
                line_str = line.decode('utf-8')
                if line_str.startswith("data: "):
                    try:
                        data = json.loads(line_str[6:])
                        
                        if data.get("type") == "assistant_chunk":
                            print(data["content"], end="", flush=True)
                            full_response += data["content"]
                        
                        elif data.get("type") == "assistant_message" and data.get("done"):
                            print(f"\n\n‚úÖ R√©ponse compl√®te re√ßue")
                            
                            # Analyser le contenu Markdown
                            markdown_elements = analyze_markdown(full_response)
                            if markdown_elements:
                                print("\nüé® √âl√©ments Markdown d√©tect√©s:")
                                for element in markdown_elements:
                                    print(f"  - {element}")
                            else:
                                print("\n‚ö†Ô∏è  Aucun √©l√©ment Markdown d√©tect√©")
                            
                            return True
                            
                    except json.JSONDecodeError:
                        continue
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def analyze_markdown(text):
    """Analyser le texte pour d√©tecter les √©l√©ments Markdown"""
    elements = []
    
    # V√©rifier le gras
    if "**" in text:
        elements.append("Texte en gras (**texte**)")
    
    # V√©rifier l'italique
    if "*" in text and "**" not in text:
        elements.append("Texte en italique (*texte*)")
    
    # V√©rifier le code inline
    if "`" in text and "```" not in text:
        elements.append("Code inline (`code`)")
    
    # V√©rifier les blocs de code
    if "```" in text:
        elements.append("Bloc de code (```)")
    
    # V√©rifier les titres
    if text.count("#") > 0:
        elements.append("Titres (# ## ###)")
    
    # V√©rifier les listes
    if "\n-" in text or "\n*" in text:
        elements.append("Listes (- ou *)")
    
    # V√©rifier les listes num√©rot√©es
    if any(line.strip().startswith(f"{i}.") for i in range(1, 10) for line in text.split('\n')):
        elements.append("Listes num√©rot√©es (1. 2. 3.)")
    
    return elements

def main():
    print("=== Test du rendu Markdown dans le chat ===")
    
    # 1. Se connecter
    print("\n1. Connexion...")
    token = login_student()
    if not token:
        print("‚ùå Impossible de se connecter")
        return
    print("‚úÖ Connexion r√©ussie")
    
    # 2. R√©cup√©rer ou cr√©er une session
    print("\n2. R√©cup√©ration/cr√©ation de session...")
    session = get_or_create_session(token)
    if not session:
        print("‚ùå Impossible de cr√©er une session")
        return
    print(f"‚úÖ Session: {session['title']}")
    
    # 3. Tester diff√©rents types de contenu Markdown
    test_messages = [
        "Peux-tu m'expliquer ce qu'est la programmation orient√©e objet avec des exemples de code ?",
        "Quels sont les avantages et inconv√©nients des diff√©rents langages de programmation ?",
        "Comment cr√©er une fonction en Python ? Donne-moi un exemple d√©taill√©.",
        "Explique-moi les concepts de base des structures de donn√©es avec des exemples."
    ]
    
    for i, message in enumerate(test_messages, 1):
        print(f"\n{'='*20} Test {i}/{len(test_messages)} {'='*20}")
        success = test_markdown_message(token, session["id"], message)
        
        if not success:
            print(f"‚ùå Test {i} √©chou√©")
            break
        
        if i < len(test_messages):
            print("\n‚è≥ Attente de 3 secondes avant le prochain test...")
            import time
            time.sleep(3)
    
    print(f"\n{'='*60}")
    print("üéØ V√©rifiez maintenant l'interface web pour voir le rendu Markdown !")
    print("   Les r√©ponses doivent afficher :")
    print("   - **Texte en gras**")
    print("   - `Code inline`")
    print("   - ```Blocs de code```")
    print("   - ## Titres")
    print("   - - Listes √† puces")

if __name__ == "__main__":
    main() 