#!/bin/bash

# Script de d√©marrage pour l'Assistant √âducatif UQAR
# Optimis√© pour macOS avec Apple Silicon (M1/M2)

set -e

echo "üöÄ D√©marrage de l'Assistant √âducatif UQAR"
echo "========================================"
echo "üçé Optimis√© pour macOS Apple Silicon"

# V√©rifier que Docker est install√©
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n'est pas install√©. Veuillez l'installer avant de continuer."
    echo "üí° T√©l√©chargez Docker Desktop pour Mac: https://www.docker.com/products/docker-desktop"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose n'est pas install√©. Veuillez l'installer avant de continuer."
    exit 1
fi

# V√©rifier que Docker Desktop est en cours d'ex√©cution
if ! docker info &> /dev/null; then
    echo "‚ùå Docker Desktop n'est pas en cours d'ex√©cution."
    echo "üí° Lancez Docker Desktop depuis vos Applications"
    exit 1
fi

# Cr√©er les dossiers n√©cessaires
echo "üìÅ Cr√©ation des dossiers n√©cessaires..."
mkdir -p backend/logs
mkdir -p backend/uploads
mkdir -p backend/chroma_data

# Copier le fichier d'environnement s'il n'existe pas
if [ ! -f backend/.env ]; then
    echo "üìù Cr√©ation du fichier .env..."
    cp backend/env.example backend/.env
    echo "‚ö†Ô∏è  N'oubliez pas de modifier les variables d'environnement dans backend/.env"
fi

# V√©rifier les ports disponibles (macOS)
echo "üîç V√©rification des ports..."
if lsof -Pi :3000 -sTCP:LISTEN -t >/dev/null 2>&1; then
    echo "‚ö†Ô∏è  Le port 3000 est d√©j√† utilis√© (Frontend)"
fi

if lsof -Pi :8000 -sTCP:LISTEN -t >/dev/null 2>&1; then
    echo "‚ö†Ô∏è  Le port 8000 est d√©j√† utilis√© (Backend)"
fi

if lsof -Pi :5432 -sTCP:LISTEN -t >/dev/null 2>&1; then
    echo "‚ö†Ô∏è  Le port 5432 est d√©j√† utilis√© (PostgreSQL)"
fi

if lsof -Pi :8001 -sTCP:LISTEN -t >/dev/null 2>&1; then
    echo "‚ö†Ô∏è  Le port 8001 est d√©j√† utilis√© (ChromaDB)"
fi

if lsof -Pi :11434 -sTCP:LISTEN -t >/dev/null 2>&1; then
    echo "‚ö†Ô∏è  Le port 11434 est d√©j√† utilis√© (Ollama)"
fi

# Construire et d√©marrer les services
echo "üî® Construction et d√©marrage des services..."
echo "‚è≥ Le t√©l√©chargement du mod√®le LLaMA 3.1 8B peut prendre 5-10 minutes..."
docker-compose up --build -d

echo ""
echo "‚úÖ Services d√©marr√©s avec succ√®s !"
echo ""
echo "üåê Acc√®s aux services :"
echo "   Frontend:    http://localhost:3000"
echo "   Backend API: http://localhost:8000"
echo "   Docs API:    http://localhost:8000/docs"
echo "   PostgreSQL:  localhost:5432"
echo "   ChromaDB:    http://localhost:8001"
echo "   Ollama:      http://localhost:11434"
echo ""
echo "üìã Commandes utiles :"
echo "   Voir les logs:        docker-compose logs -f"
echo "   Arr√™ter les services: docker-compose down"
echo "   Red√©marrer:          docker-compose restart"
echo "   Logs Ollama:         docker-compose logs -f ollama"
echo ""
echo "‚è≥ Les services peuvent prendre quelques minutes √† √™tre compl√®tement op√©rationnels."
echo "   Le mod√®le LLaMA 3.1 8B (4.7GB) se t√©l√©charge automatiquement au premier d√©marrage."
echo ""
echo "üçé Optimis√© pour Apple Silicon - Performances excellentes sur M1/M2 !"
echo "üéì Bon apprentissage avec l'Assistant √âducatif UQAR !" 